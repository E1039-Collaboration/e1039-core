#ifndef _ONL_MON_TRIG_V1495__H_
#define _ONL_MON_TRIG_V1495__H_
#include "OnlMonClient.h"

class OnlMonTrigV1495: public OnlMonClient {
 public:
  typedef enum { H1X, H2X, H3X, H4X, H1Y, H2Y, H4Y1, H4Y2 } HodoType_t;
  static const int N_DET = 8;

 private:
  HodoType_t m_type;
  int m_lvl;
  std::string list_det_name[N_DET];
  int         list_det_id  [N_DET];
  int hit_count_t [N_DET];
  int FPGA_hits[5];
  
  TH1* fpga_trig   ;
  TH1* fpga_trig_cl;
  TH1* RF_period   ; 
  TH2* h2_time_ele_fpga[N_DET];
  TH1* count_proj[8];
  TLine* proj_line[8];
  TLine* proj_line_H1[8];
  TH2* h2_fpga_time; 
 //TH1* h1_ele_in  [N_DET];
 // TH1* h1_time    [N_DET];
 // TH1* h1_time_in [N_DET];
  TH2* h2_time_ele[N_DET];
  TH2* h2_RF_count;
  TH2* h2_RF;
 public:
  OnlMonTrigV1495(); //const int lvl);
  virtual ~OnlMonTrigV1495() {}
  OnlMonClient* Clone() { return new OnlMonTrigV1495(*this); }

  int InitOnlMon(PHCompositeNode *topNode);
  int InitRunOnlMon(PHCompositeNode *topNode);
  int ProcessEventOnlMon(PHCompositeNode *topNode);
  int EndOnlMon(PHCompositeNode *topNode);
  int FindAllMonHist();
  int DrawMonitor();

 private:
  void SetDet();
  int Hodo_AND(int hits_a, int hits_b);
  int Hodo_OR(int hits_a, int hits_b);
  void Fill_loop(int FPGA_hits, int FPGA_num);
};

#endif /* _ONL_MON_TRIG_V1495__H_ */
